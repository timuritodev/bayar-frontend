import React, { useState, useEffect } from 'react';
import { vkApiService, VKPost } from '../../services/vkApi';
import styles from './style.module.scss';

interface VKPostsProps {
	groupId: string;
	count?: number;
	showGroupInfo?: boolean;
}

const VKPosts: React.FC<VKPostsProps> = ({
	groupId,
	count = 10,
	showGroupInfo = true
}) => {
	const [posts, setPosts] = useState<VKPost[]>([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);
	const [groupName, setGroupName] = useState<string>('');

	useEffect(() => {
		loadPosts();
	}, [groupId, count]);

	const loadPosts = async () => {
		try {
			setLoading(true);
			setError(null);

			// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
			let groupInfo = null;
			if (showGroupInfo) {
				groupInfo = await vkApiService.getGroupInfo(groupId);
				if (groupInfo) {
					setGroupName(groupInfo.name);
				}
			}

			// –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
			const postsData = await vkApiService.getPostsWithFallback(groupId, count);
			setPosts(postsData);

		} catch (err) {
			console.error('Error loading posts:', err);
			setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤');
			setPosts([]); // –û—á–∏—â–∞–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
		} finally {
			setLoading(false);
		}
	};

	const formatDate = (timestamp: number) => {
		return new Date(timestamp * 1000).toLocaleDateString('ru-RU', {
			year: 'numeric',
			month: 'long',
			day: 'numeric',
			hour: '2-digit',
			minute: '2-digit'
		});
	};

	const formatText = (text: string) => {
		if (!text) return '';

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
		const urlRegex = /(https?:\/\/[^\s]+)/g;
		const processedText = text.replace(urlRegex, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
		const hashtagRegex = /#([–∞-—è—ë\w]+)/gi;
		const finalText = processedText.replace(hashtagRegex, '<span class="hashtag">#$1</span>');

		return finalText;
	};

	const getImageUrl = (post: VKPost) => {
		if (!post.attachments) return null;

		const photoAttachment = post.attachments.find(att => att.type === 'photo');
		if (photoAttachment?.photo?.sizes) {
			// –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
			const mediumSize = photoAttachment.photo.sizes.find(size => size.type === 'm') ||
				photoAttachment.photo.sizes.find(size => size.type === 's') ||
				photoAttachment.photo.sizes[photoAttachment.photo.sizes.length - 1];

			return mediumSize?.url || null;
		}

		return null;
	};

	if (loading) {
		return (
			<div className={styles.loading}>
				<div className={styles.spinner}></div>
				<p>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã...</p>
			</div>
		);
	}

	if (error) {
		return (
			<div className={styles.error}>
				<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤: {error}</p>
				<button onClick={loadPosts} className={styles.retryButton}>
					–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
				</button>
			</div>
		);
	}

	return (
		<div className={styles.vkPosts}>
			{showGroupInfo && groupName && (
				<div className={styles.groupInfo}>
					<h3>–ü–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã: {groupName}</h3>
				</div>
			)}

			<div className={styles.postsList}>
				{posts.length === 0 ? (
					<div className={styles.emptyState}>
						<p>–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
						<p>–í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—É–±–ª–∏—á–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</p>
					</div>
				) : (
					posts.map((post) => (
						<div key={post.id} className={styles.post}>
							<div className={styles.postHeader}>
								<span className={styles.postDate}>
									{formatDate(post.date)}
								</span>
								{post.views && (
									<span className={styles.views}>
										üëÅÔ∏è {post.views.count}
									</span>
								)}
							</div>

							{getImageUrl(post) && (
								<div className={styles.postImage}>
									<img
										src={getImageUrl(post)!}
										alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"
										loading="lazy"
									/>
								</div>
							)}

							<div className={styles.postContent}>
								<div
									className={styles.postText}
									dangerouslySetInnerHTML={{ __html: formatText(post.text) }}
								/>
							</div>

							<div className={styles.postStats}>
								{post.likes && (
									<span className={styles.stat}>
										‚ù§Ô∏è {post.likes.count}
									</span>
								)}
								{post.reposts && (
									<span className={styles.stat}>
										üîÑ {post.reposts.count}
									</span>
								)}
								{post.comments && (
									<span className={styles.stat}>
										üí¨ {post.comments.count}
									</span>
								)}
							</div>
						</div>
					))
				)}
			</div>
		</div>
	);
};

export default VKPosts;
